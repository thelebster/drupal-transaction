diff --git a/src/Event/TransactionExecutionEvent.php b/src/Event/TransactionExecutionEvent.php
index 7bd0d05..5e540cb 100644
--- a/src/Event/TransactionExecutionEvent.php
+++ b/src/Event/TransactionExecutionEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\transaction\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\transaction\TransactionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when a transaction is executed.
diff --git a/src/TransactorHandler.php b/src/TransactorHandler.php
index d81f0f5..65871ba 100644
--- a/src/TransactorHandler.php
+++ b/src/TransactorHandler.php
@@ -152,7 +152,7 @@ class TransactorHandler implements TransactorHandlerInterface {
       $transaction->setExecutor($executor ?: User::getAnonymousUser());
 
       // Launch the transaction execution event.
-      $this->eventDispatcher->dispatch(TransactionExecutionEvent::EVENT_NAME, new TransactionExecutionEvent($transaction));
+      $this->eventDispatcher->dispatch(new TransactionExecutionEvent($transaction), TransactionExecutionEvent::EVENT_NAME);
 
       // Save the transaction.
       if ($save) {
diff --git a/tests/src/Functional/FunctionalTransactionTestBase.php b/tests/src/Functional/FunctionalTransactionTestBase.php
index a2bf593..b1b07db 100644
--- a/tests/src/Functional/FunctionalTransactionTestBase.php
+++ b/tests/src/Functional/FunctionalTransactionTestBase.php
@@ -35,7 +35,7 @@ abstract class FunctionalTransactionTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create a basic bundle on the entity test type.
diff --git a/tests/src/Functional/TransactionAdminTest.php b/tests/src/Functional/TransactionAdminTest.php
index 787fea6..b46feb0 100644
--- a/tests/src/Functional/TransactionAdminTest.php
+++ b/tests/src/Functional/TransactionAdminTest.php
@@ -22,7 +22,7 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create and log in an administrative user.
@@ -70,7 +70,7 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
     $transactor = 'transaction_generic';
     $target_entity_type = 'entity_test';
     $post = ['target_entity_type' => $target_entity_type, 'transactor' => $transactor];
-    $this->drupalPostForm(NULL, $post, 'Continue');
+    $this->submitForm($post, 'Continue');
 
     $label = 'Generic workflow';
     $id = 'generic_workflow';
@@ -78,15 +78,15 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'label' => $label,
       'id' => $id,
     ];
-    $this->drupalPostForm(NULL, $post, 'Create transaction type');
+    $this->submitForm($post, 'Create transaction type');
 
     // Check the created transaction type values.
     /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
     $transaction_type = TransactionType::load($id);
     $this->assertNotNull($transaction_type);
-    $this->assertEqual($transaction_type->label(), $label);
-    $this->assertEqual($transaction_type->getTargetEntityTypeId(), $target_entity_type);
-    $this->assertEqual($transaction_type->getPluginId(), $transactor);
+    $this->assertEquals($transaction_type->label(), $label);
+    $this->assertEquals($transaction_type->getTargetEntityTypeId(), $target_entity_type);
+    $this->assertEquals($transaction_type->getPluginId(), $transactor);
 
     /** @var \Drupal\transaction\TransactorPluginInterface $transactor_plugin */
     $transactor_plugin = $transaction_type->getPlugin();
@@ -107,7 +107,8 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'last_transaction_label' => 'Last transaction',
       'last_transaction_field_name' => 'last_transaction',
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');
 
     // Check the log message field was created on the transaction type.
     /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
@@ -128,7 +129,8 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       // Execution control: ask user.
       'execution' => '3',
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');
 
     // Checks the transactor options.
     $expected_plugin_configuration = [
@@ -154,7 +156,8 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       // Execution control: ask user.
       'local_task' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');
 
     // Check that the option were saved.
     /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
@@ -186,7 +189,7 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
       'description' => 'Transaction operation description',
       'details' => 'Details line line 1' . PHP_EOL . 'Details line line 2',
     ];
-    $this->drupalPostForm(NULL, $post, 'Save transaction operation');
+    $this->submitForm($post, 'Save transaction operation');
 
     // Check the creation message.
     $this->assertSession()->pageTextContains('Transaction operation Test operation has been added.');
@@ -210,7 +213,7 @@ class TransactionAdminTest extends FunctionalTransactionTestBase {
     // Go to the deletion.
     $this->drupalGet('admin/config/workflow/transaction/delete/generic_workflow');
     $this->assertSession()->pageTextContains('Are you sure you want to delete Generic workflow?');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');
 
     $this->assertSession()->pageTextContains('Transaction type Generic workflow deleted.');
     // Check there as no transaction type.
diff --git a/tests/src/Kernel/KernelTransactionTestBase.php b/tests/src/Kernel/KernelTransactionTestBase.php
index 5009e48..675a82b 100644
--- a/tests/src/Kernel/KernelTransactionTestBase.php
+++ b/tests/src/Kernel/KernelTransactionTestBase.php
@@ -19,7 +19,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public static $modules = [
+  protected static $modules = [
     'system',
     'user',
     'filter',
@@ -75,7 +75,7 @@ abstract class KernelTransactionTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('entity_test');
